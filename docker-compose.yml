version: '3.8'

services:
  # Backend API service
  backend:
    build: ./backend
    container_name: nano-url-backend
    restart: always
    ports:
      - '3001:3001'
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/nano-url
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mongodb
      - redis
    networks:
      - nano-url-network
    volumes:
      - backend-logs:/app/logs

  # Frontend service
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=http://localhost:3001/api
    container_name: nano-url-frontend
    restart: always
    ports:
      - '80:80'
    depends_on:
      - backend
    networks:
      - nano-url-network

  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: nano-url-mongodb
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongodb-data:/data/db
    networks:
      - nano-url-network

  # Redis service
  redis:
    image: redis:alpine
    container_name: nano-url-redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - nano-url-network

  # Load balancer (for production scaling)
  # nginx:
  #   image: nginx:alpine
  #   container_name: nano-url-nginx
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - nano-url-network

networks:
  nano-url-network:
    driver: bridge

volumes:
  mongodb-data:
  redis-data:
  backend-logs:
